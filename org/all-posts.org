#+hugo_base_dir: ../
#+seq_todo: TODO NEXT DONE

* TODO Test tags and topics                                         :foo_tag:
:PROPERTIES:
:EXPORT_FILE_NAME: test-tags
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :topics '(test fun "out doors")
:END:

** Testing, 1 2 3
This is a test, it is only a test.

More tests to come.

*** And away we go!

* DONE How I Org, A Software Engineer's Process                        :productivity:personal_process:
CLOSED: [2022-08-10 Wed 20:56]
:PROPERTIES:
:EXPORT_FILE_NAME: how-i-org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :topics '(Emacs "Org-mode")
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-08-10 Wed 20:56]
:END:

** How I Org
I've encountered a half dozen or so personal productivity, task management, organization and motivation systems. (I will spare the list.) The latest I've read is David Allen's [[https://gettingthingsdone.com/][Getting Things Done]]. Having been there and done this, I read Allen's book with a "Just take me to the algorithm" mentality.

Also, I create software for living. Software development is an occupation that is both creative and technical. It's also a craft that is mostly performed at a computer and is now more virtual than ever. A lot of text in /Getting Things Done/ covers tools and techniques that support the algorithm, but are incidental: there are many ways to implement, track, and execute Allen's techniques. A salesperson's needs here are different than a manager's, are different than a software engineer's, and so on.

My own personal organization needs are nearly full-virtual. Either I'm in a virtual meeting, preparing for one, working on tasks from one, or---and what I do best---designing and writing code and building software products. And finally, I spend as much time as possible in the Emacs editor. There are many, many code editors and IDEs out there.  Yet once you've paid the admittedly steep learning curve for Emacs, it's the most effective "flow tool" I know of. What I do in Emacs, including this very text, I can get lost in, which means maximum productivity.

By the way, I do not mash up personal todos with my work as GTD encourages. I prefer a simpler in->due?->done for this part of my life. For personal work I use [[https://todoist.com/][Todoist]] for it's clean UX, mobile app, and sync across devices. Todoist recently added [[https://todoist.com/kanban-board][Kanban boards,]] so I may toy with a GTD-esque flow sans Emacs (which is a fiddly challenge to sync across devices.) That notwithstanding, I'll continue with my Emacs setup.

*** References
The following works were highly influential in my own productivity thinking and, of course, this article. 
- [[https://gettingthingsdone.com/][Getting Things Done]] by David Allen: This highly popular "work of the day" got me re-thinking about personal productivity again, and tweaking some of my own practice as a result.
- [[https://www.researchgate.net/publication/222552899_Getting_Things_Done_The_Science_Behind_Stress-Free_Productivity][Getting Things Done: The Science Behind Stress-Free Productivity]] by Francis Heylighen and Clément Vidal: An academic paper on GTD that lays a foundation for what I think is the biggest return on investment for GTD: reducing cognitive stress and overload. No less important, the authors provide an extremely concise and on-point summary of Allen's method, including a comprehensive (wait for it) [[https://www.researchgate.net/profile/Francis-Heylighen/publication/222552899/figure/fig1/AS:304772235186176@1449674771358/a-flowchart-depicting-the-GTD-process-for-organizing-and-processing-incoming-stuff.png][flowchart of the algorithm]]! Recommended reading.
- [[https://www.edwardslingerland.com/trying-not-to-try][Trying Not To Try]] by Edward Slingerland: This trade book is very thought provoking if you have interest in the convergence of history, culture, religion, and creativity. Of most relevance here is the connection to "flow state". Every section of Slingerland's book got me thinking about my own creativity, workplace and historical bias, and where I fit on the spectrum between Confucius and Laozi. /Wu-wei/ ftw!
- [[https://www.youtube.com/watch?v=VcgjTEa0kU4][Org Mode Basics]] and [[https://www.youtube.com/watch?v=PNE-mgkZ6HM][Organize Your Life with Org Mode]] (videos): [[https://systemcrafters.cc/][System Crafters]] is a great source of live code videos and one of the best ways to get into Emacs.

** Still Interested?
For me GTD, and various realizations of GTD in task tracking tools, are too micro for my needs. That's where Emacs org-mode steps in. Let me begin with what got me started using org-mode.

*** Oh, I Need to Write That Down!
Just about every day I come across something I need to record when I wasn't planning on recording anything. And I need to record it quickly, so I don't lose context of whatever's being discussed. Or, I'm deep into writing code, docs, or messages and a side thought pops into my head. I need to push the stack, record it, and pop back into what I was doing.

Used to be (post paper notebook) I'd bring up a note taking app "real quick". I've tried a couple commercial web and platform apps and "real quick" just wasn't quick enough. Plus, I'd often be hit cognitive stress with, "Now where do I put this?" before or after finishing my note. GTD promises "stress free", but my stress started before organizing tasks and projects.

As a software engineer, one thing was invariably true: I had a code editor up. More often than not, that editor was Emacs, which I use alongside more specialized IDEs for browsing large projects, shell access, text processing, etc. (/Emacs OS/, as it's called.) I started using the Emacs ~*scratch*~ buffer for quick note taking, and then copy it elsewhere later. (Or not: sometimes I'd forget!)

I had used org-mode for outlines and generating markdown docs. It was just a matter of time for a "doh!" moment. I'd seen org-mode used as a calendar, but it was [[https://systemcrafters.cc/][System Crafters]] that really sparked the light bulb for me. After absorbing the copious and cryptic org-mode documentation, experimenting for a few weeks, I settled on the following system that's always just a ~M-TAB C-c c~ away.


** Walk-through My Setup

*** Emacs Setup
If you're interested in my detailed Emacs config, i.e., ~init.el~ you can find my setup in my [[https://github.com/rmorison/dotfiles][GitHub dotfiles repo]]. My org-mode config started with [[https://www.youtube.com/watch?v=PNE-mgkZ6HM][Organize Your Life with Org Mode]]. If you're new to Emacs or org-mode, start there.

The rest of this doc is a walk-through with animated GIFs to illustrate.

*** It All Starts with a Meeting
Let's start with a meeting, which was my original use-case. Alt-tab to Emacs, then ~C-c c m~ to open an entry in ~meetings.org~ from the [[https://github.com/rmorison/dotfiles/blob/main/org/templates/meeting.org][meeting template]]. The template will ask who the meeting is with and what it's about. (There's also a 1-on-1 meeting template, with just the "who?" question, ~C-c c 1~.)

#+CAPTION: Fave Music meeting with Lunis and Lucy
[[./img/new-meeting.gif]]

When the meeting is over and I'm ready to finish the capture I'd normally hit ~C-c C-c~. Instead, I'll use ~C-u C-u C-c C-c~ to /follow/ the capture buffer into the filed location in ~meetings.org~. I'll add a ~TODO~ manually, without a template, by typing ~M-enter~ to open a new outline node and then ~TODO Learn Für Elise on piano~. Text files ftw!

#+CAPTION: File the meeting, create a task 
[[./img/file-meeting.gif]]

*** Check the Backlog, Schedule the Task
~C-c a a~ brings up my agenda for the week. It's empty right now, nothing scheduled. ~C-c a b~ brings up my backlog view. I'll I see the "Learn Für Elise on piano" todo. Using GTD practice, I can either do this right away (2m rule, iirc) and make it DONE, move it to NEXT state, or realize it's too big for a single task and break it up.
#+CAPTION Agenda check
[[./img/check-backlog.gif]]

*** My Algorithm
Now's a good time to highlight the tasks states I use and my typical path through them.
#+begin_src mermaid :file img/gtd-states.png
stateDiagram-v2
BREAKDOWN: BREAKDOWN-PLAN
INPROGRESS: IN-PROGRESS
HELDBLOCKED: HELD-BLOCKED
WONTDO: WONT-DO
WONTDOPROJECT: WONT-DO
state if_project <<choice>>
state getter_done <<choice>>
state last_mile <<choice>>
state plan_project <<choice>>
[*] --> TODO
TODO --> if_project
if_project --> NEXT: sized and timely
if_project --> BREAKDOWN: too bigga eat
if_project --> WONTDO: not happening
state BREAKDOWN {
  plan_project --> PLANNED: create project tasks
  plan_project --> WONTDOPROJECT: abandon project
  PLANNED --> [*]
  WONTDOPROJECT --> [*]
}
NEXT --> getter_done
getter_done --> INPROGRESS: it's alive!
getter_done --> DELEGATED: tracking
getter_done --> WONTDO: thought so, but no
INPROGRESS --> last_mile
last_mile --> DONE: yay!
last_mile --> WONTDO: changed my mind
last_mile --> HELDBLOCKED: blocked
HELDBLOCKED --> INPROGRESS: unblocked
HELDBLOCKED --> WONTDO: give up
DONE --> [*]
WONTDO --> [*]
#+end_src

#+RESULTS:
[[file:img/gtd-states.png]]

*** Review Backlog, Schedule Work
~C-c a b~ into my backlog view, I realize my task is a project, too big on its own. (I try to visit the backlog at least once a day.) I'm going to set the task to ~BREAKDOWN-PLAN~. (For example, I have to get a keyboard, buy the sheet music, hire a music teacher) and schedule the planning work for tomorrow.

In the backlog view cursor to the "~TODO~ Learn Für Elise on piano", use ~C-c C-t~ and choose the new state with ~b~. Then, ~C-c C-s~ brings up the calendar. ~S-→~ navigates the calendar. I'll finish with ~C-c a a~ to double check my agenda.
[[./img/schedule-planning.gif]]

*** Check Agenda, Plan Project
Later, I'll check my agenda, ~C-c a a~, arrow down to the ~BREAKDOWN-PLAN~ task, hit ~ENTER~ to jump to the task. I'll drop ~TODO~ entries right under that in the outline. I'll change that ~BREAKDOWN-PLAN~ state to ~PLANNED~, then ~C-x C-s~ to save.
[[./img/plan-project.gif]]

*** Refile Into Projects File, Set Deadlines, Tee up Tasks
Refile is the gem of org-mode. I don't want to track and annotate my project in my meetings folder, that's not the way. I'm going to move the whole project outline to my projects folder.

~C-x C-f meetings.org~ to open my meetings file, arrow to the ~PLANNED~ project, and ~C-c C-w~ to invoke org-mode refile. 
[[./img/refile-project.gif]]

*** Prep and Schedule my Backlog
Next, I'll set deadlines and move tasks to ~NEXT~ state. ~C-c a b~ to the backlog, ~C-c C-t n~ for ~NEXT~ state and ~C-c C-d~ to set deadlines, ~C-c C-s~ for scheduled dates. Then I hand edit the "Practice Weekly" task scheduled date for a 1 week [[https://orgmode.org/manual/Repeated-tasks.html][repeated task]]. (Either you love text files, or you don't.)
[[./img/schedule-backlog.gif]]

*** Add Reference Note, Link it in Project
Finally I'll take some historical notes about Für Elise and put a link to those notes into the project outline. I open a reference note with ~C-c c n~ and save it with ~C-u C-u C-c C-c~. The template asks for a title, then I can tap in text. I've bound ~C-c l~ to save an "anchor link" at the current point, and can then open ~projects.org~ and use ~C-c C-l~ to paste it in.
[[./img/note-taking.gif]]

** Features, Features, and more Features
Emacs org-mode has a dizzying array of [[https://orgmode.org/features.html][features]] and this walk-through is only meant to capture the essence of how I org. I don't use all of these, but for reference, here goes...
- [[https://orgmode.org/manual/Tags.html][Tags]]
- [[https://orgmode.org/manual/Tracking-your-habits.html][Habits]]
- [[https://orgmode.org/manual/Clocking-Work-Time.html][Time tracking]]
- [[https://orgmode.org/worg/org-contrib/babel/][Executing code blocks (Babel)]]
- [[https://orgmode.org/manual/Exporting.html][Exporting]] (say, to markdown or HTML) and [[https://orgmode.org/manual/Publishing.html][publishing]]
- [[https://orgmode.org/worg/org-blog-wiki.html][Blogging and content sites]]

And of course, we're talking Emacs here. If you can code it in Elisp, you can do it.

